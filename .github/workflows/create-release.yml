name: Create release candidate

on:
  workflow_dispatch:

env:
  # kosli commands picks up org, flow, trail and api-token from these environment variables
  KOSLI_ORG: kosli-public
  KOSLI_FLOW: "jira-example-release"
  KOSLI_API_TOKEN: "${{ secrets.KOSLI_PUBLIC_API_TOKEN }}"
  KOSLI_CLI_VERSION: "2.11.8"
  KOSLI_ENV_STAGING: "jira-integration-example-staging"
  KOSLI_ENV_PROD: "jira-integration-example-prod"
  KOSLI_FLOW_SOURCE: "jira-example-source"
  # KOSLI_DRY_RUN: true
  JIRA_BASE_URL: "https://kosli-team.atlassian.net"
  JIRA_USERNAME: ${{ secrets.KOSLI_JIRA_USERNAME }}
  JIRA_API_TOKEN: ${{ secrets.KOSLI_JIRA_API_TOKEN }}
  JIRA_PROJECT_ID: 10000


jobs:
  create-candidate:
    name: Create candidate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli cli
        uses: kosli-dev/setup-cli-action@v2
        with:
          version:
            ${{ env.KOSLI_CLI_VERSION }}

      - name: Create Jira release candidate
        run: |          
          source scripts/lib-jira.sh

          # Fail if release already exists
          CURRENT_REL_JSON=$(get_current_release_candidate ${{ env.JIRA_PROJECT_ID }})
          CURRENT_REL=$(echo "${CURRENT_REL_JSON}" | jq .values)
          if [ "${CURRENT_REL}" != "[]" ]; then
            echo "Release candidate already exist: ${CURRENT_REL}"
            exit 1
          fi

          # Create the release and get the release ID
          TIMESTAMP=$(date -u "+%Y-%m-%d-%H-%M-%S")
          CREATE_RESULT_JSON=$(create_release ${{ env.JIRA_PROJECT_ID }} ${TIMESTAMP})
          RELEASE_ID=$(echo "${CREATE_RESULT_JSON}" | jq .id)
          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV

      - name: Begin trail
        uses: ./.github/workflows/composites/kosli-begin-trail
        with:
          kosli-trail: ${{ env.RELEASE_ID }}
#          kosli-template-file: ${{ env.KOSLI_TEMPLATE_FILE }}

      - name: Report current staging SW
        run: |
          source scripts/lib-kosli.sh
          get_current_running_env_json ${{ env.KOSLI_ENV_STAGING }} > /tmp/staging-env.json
          jq '[.[] | {name, fingerprint, git_commit}]' /tmp/staging-env.json > /tmp/user-data.json
          kosli attest generic \
            --name staging-software \
            --trail ${{ env.RELEASE_ID }} \
            --user-data /tmp/user-data.json

      - name: Add Jira tickets to release
        run: |          
          source scripts/lib-jira.sh
          source scripts/lib-kosli.sh
          # Add all jira tickets between prod and staging
          JIRA_KEYS=$(get_issue_keys_between_staging_and_prod)
          echo "Found issues: ${JIRA_KEYS}"
          for JIRA_KEY in ${JIRA_KEYS}; do 
            add_issue_to_release ${JIRA_KEY} ${RELEASE_ID}
          done
