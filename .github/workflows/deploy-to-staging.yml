name: Deploy to Staging

on:
  workflow_dispatch:

env:
  # kosli commands picks up org, flow, trail and api-token from these environment variables
  KOSLI_ORG: "${{ vars.KOSLI_ORG }}"
  KOSLI_API_TOKEN: "${{ secrets.KOSLI_PUBLIC_API_TOKEN }}"
  KOSLI_CLI_VERSION: "${{ vars.KOSLI_CLI_VERSION }}"
  KOSLI_ENV_DEV: "${{ vars.KOSLI_ENV_DEV }}"

jobs:
  deploy-to-staging:
    name: Deploy to staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli cli
        uses: kosli-dev/setup-cli-action@v2
        with:
          version:
            ${{ vars.KOSLI_CLI_VERSION }}

      - name: Get what SW is running in dev
        run: |
          source scripts/lib-kosli.sh
          get_current_running_env_json ${{ env.KOSLI_ENV_DEV }} > /tmp/dev-env.json

      - name: Get frontend tag
        run: |
          COMMIT_SHA=$(jq -r '.[] | select(.name == "frontend") | .git_commit' /tmp/dev-env.json)
          echo "COMMIT_SHA_FRONTEND=$COMMIT_SHA" >> "$GITHUB_ENV"
          FINGERPRINT=$(jq -r '.[] | select(.name == "frontend") | .fingerprint' /tmp/dev-env.json)
          echo "FINGERPRINT_FRONTEND=$FINGERPRINT" >> "$GITHUB_ENV"

      - name: Get backend tag
        run: |
          COMMIT_SHA=$(jq -r '.[] | select(.name == "backend") | .git_commit' /tmp/dev-env.json)
          echo "COMMIT_SHA_BACKEND=$COMMIT_SHA" >> "$GITHUB_ENV"
          FINGERPRINT=$(jq -r '.[] | select(.name == "backend") | .fingerprint' /tmp/dev-env.json)
          echo "FINGERPRINT_BACKEND=$FINGERPRINT" >> "$GITHUB_ENV"

      - name: Assert Artifacts
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: ./.github/actions/assert-artifacts
        with:
          kosli-environment: ${{ vars.KOSLI_ENV_STAGING }}
          fingerprints: |
            ${{ env.FINGERPRINT_FRONTEND }},
            ${{ env.FINGERPRINT_BACKEND }}

      - name: Deploy frontend
        # We do not have a real repo so we just tag the git repo and then the
        # simulate-environment-reporting-staging.yml will start reporting that
        # this environment is now running.
        env:
          GH_TOKEN: ${{ secrets.GH_UPDATE_TAG_TOKEN }}
          OWNER: "kosli-dev"
          REPO: "jira-integration-example"
          TAG: "running-staging-frontend"
          COMMIT_SHA: ${{ env.COMMIT_SHA_FRONTEND }}
        run: |
          API_URL="https://api.github.com/repos/${OWNER}/${REPO}/git/refs/tags/${TAG}"
          
          # Check if the tag exists
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github.v3+json" "${API_URL}")

          if [[ "$STATUS_CODE" == "200" ]]; then
            echo "Tag ${TAG} exists, updating..."
            curl -X PATCH -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github.v3+json" \
              -d "{\"sha\": \"${COMMIT_SHA}\", \"force\": true}" "${API_URL}"
          else
            echo "Tag ${TAG} does not exist, creating..."
            curl -X POST -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github.v3+json" \
              -d "{\"ref\": \"refs/tags/${TAG}\", \"sha\": \"${COMMIT_SHA}\"}" "https://api.github.com/repos/${OWNER}/${REPO}/git/refs"
          fi
          echo "Deployed frontend commit ${COMMIT_SHA}"

      - name: Deploy backend
        # We do not have a real repo so we just tag the git repo and then the
        # simulate-environment-reporting-staging.yml will start reporting that
        # this environment is now running.
        env:
          GH_TOKEN: ${{ secrets.GH_UPDATE_TAG_TOKEN }}
          OWNER: "kosli-dev"
          REPO: "jira-integration-example"
          TAG: "running-staging-backend"
          COMMIT_SHA: ${{ env.COMMIT_SHA_BACKEND }}
        run: |
          API_URL="https://api.github.com/repos/${OWNER}/${REPO}/git/refs/tags/${TAG}"
          
          # Check if the tag exists
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github.v3+json" "${API_URL}")

          if [[ "$STATUS_CODE" == "200" ]]; then
            echo "Tag ${TAG} exists, updating..."
            curl -X PATCH -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github.v3+json" \
              -d "{\"sha\": \"${COMMIT_SHA}\", \"force\": true}" "${API_URL}"
          else
            echo "Tag ${TAG} does not exist, creating..."
            curl -X POST -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github.v3+json" \
              -d "{\"ref\": \"refs/tags/${TAG}\", \"sha\": \"${COMMIT_SHA}\"}" "https://api.github.com/repos/${OWNER}/${REPO}/git/refs"
          fi
          echo "Deployed backend commit ${COMMIT_SHA}"
