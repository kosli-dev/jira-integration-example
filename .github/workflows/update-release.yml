name: Update release candidate

on:
  workflow_dispatch:

env:
  # kosli commands picks up org, flow, trail and api-token from these environment variables
  KOSLI_ORG: kosli-public
  KOSLI_API_TOKEN: "${{ secrets.KOSLI_PUBLIC_API_TOKEN }}"
  KOSLI_CLI_VERSION: "2.11.8"
  KOSLI_ENV_STAGING: "jira-integration-example-staging"
  KOSLI_ENV_PROD: "jira-integration-example-prod"
  KOSLI_FLOW_FRONTEND: "jira-example-frontend"
  KOSLI_FLOW_BACKEND: "jira-example-backend"
  # KOSLI_DRY_RUN: true
  JIRA_BASE_URL: "https://kosli-team.atlassian.net"
  JIRA_USERNAME: ${{ secrets.KOSLI_JIRA_USERNAME }}
  JIRA_API_TOKEN: ${{ secrets.KOSLI_JIRA_API_TOKEN }}
  JIRA_PROJECT_ID: 10000


jobs:
  update-candidate:
    name: Update candidate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli cli
        uses: kosli-dev/setup-cli-action@v2
        with:
          version:
            ${{ env.KOSLI_CLI_VERSION }}

      - name: Update release candidate
        run: |          
          source scripts/lib-jira.sh
          source scripts/lib-kosli.sh

          # Fail if release does not exists
          CURRENT_REL_JSON=$(get_current_release_candidate ${{ env.JIRA_PROJECT_ID }})
          echo CURRENT_REL_JSON=$CURRENT_REL_JSON
          CURRENT_REL=$(echo "${CURRENT_REL_JSON}" | jq .values)
          if [ "${CURRENT_REL}" == "[]" ]; then
            echo "No release candidate exist: ${CURRENT_REL}"
            exit 1
          fi
          
#          # Add all jira tickets between prod and staging
#          JIRA_KEYS=$(get_issue_keys_between_staging_and_prod)
#          echo "Found issues: ${JIRA_KEYS}"
#          for JIRA_KEY in ${JIRA_KEYS}; do
#            add_issue_to_release ${JIRA_KEY} ${RELEASE_ID}
#          done
