name: Update release candidate

on:
  workflow_dispatch:

env:
  # kosli commands picks up org, flow, trail and api-token from these environment variables
  KOSLI_ORG: "${{ vars.KOSLI_ORG }}"
  KOSLI_FLOW: "jira-example-release"
  KOSLI_API_TOKEN: "${{ secrets.KOSLI_PUBLIC_API_TOKEN }}"
  KOSLI_CLI_VERSION: "${{ vars.KOSLI_CLI_VERSION }}"
  KOSLI_ENV_STAGING:  "${{ vars.KOSLI_ENV_STAGING }}"
  KOSLI_ENV_PROD:  "${{ vars.KOSLI_ENV_PROD }}"
  KOSLI_FLOW_SOURCE: "jira-example-source"
  # KOSLI_DRY_RUN: true
  DEBUG: true
  JIRA_BASE_URL: "${{ vars.JIRA_BASE_URL }}"
  JIRA_USERNAME: ${{ secrets.KOSLI_JIRA_USERNAME }}
  JIRA_API_TOKEN: ${{ secrets.KOSLI_JIRA_API_TOKEN }}
  JIRA_PROJECT_ID: "${{ vars.JIRA_PROJECT_ID }}"


jobs:
  update-candidate:
    name: Update release candidate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli cli
        uses: kosli-dev/setup-cli-action@v2
        with:
          version:
            ${{ vars.KOSLI_CLI_VERSION }}

      - name: Update Jira release candidate
        run: |          
          source scripts/lib-jira.sh

          # Fail if release does not exists
          CURRENT_REL_JSON=$(get_current_release_candidate ${{ env.JIRA_PROJECT_ID }})
          
          echo $CURRENT_REL_JSON >> $GITHUB_STEP_SUMMARY
          
          REL_VALUES_JSON=$(echo "${CURRENT_REL_JSON}" | jq .values)
          if [ "${REL_VALUES_JSON}" == "[]" ]; then
            echo "No release candidate exist: ${CURRENT_REL_JSON}"
            exit 1
          fi
          
          RELEASE_ID=$(echo "${REL_VALUES_JSON}" |  jq -r '.[0].id')
          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV
          echo "Updated Jira release_id: ${RELEASE_ID}" >> $GITHUB_STEP_SUMMARY

      - name: Report current staging SW
        run: |
          source scripts/lib-kosli.sh
          get_current_running_env_json ${{ env.KOSLI_ENV_STAGING }} > /tmp/staging-env.json
          create_running_sw_short_list_json /tmp/staging-env.json > /tmp/staging-sw.json

          kosli attest custom \
            --type=running-sw \
            --name staging-software \
            --trail ${{ env.RELEASE_ID }} \
            --attestation-data /tmp/staging-sw.json
          echo "Current staging SW:" >> $GITHUB_STEP_SUMMARY
          cat /tmp/staging-sw.json | jq >> $GITHUB_STEP_SUMMARY


      - name: Add Jira issues to release
        run: |
          source scripts/lib-jira.sh
          source scripts/lib-kosli.sh

          JIRA_KEYS_IN_REL=($(get_issue_keys_in_release ${{ env.RELEASE_ID }}))
          JIRA_KEYS_IN_KOSLI=($(get_issue_keys_between_staging_and_prod ${KOSLI_ENV_STAGING} ${KOSLI_ENV_PROD} ${KOSLI_FLOW_SOURCE}))

          # Add all new jira issues between prod and staging
          echo "Adding Jira issues:"  >> $GITHUB_STEP_SUMMARY
          for JIRA_KEY in ${JIRA_KEYS_IN_KOSLI[@]}; do
            if [[ ! " ${JIRA_KEYS_IN_REL[@]} " =~ " ${JIRA_KEY} " ]]; then
              add_issue_to_release ${JIRA_KEY} ${{ env.RELEASE_ID }}
              echo ${JIRA_KEY} >> $GITHUB_STEP_SUMMARY
            fi
          done
